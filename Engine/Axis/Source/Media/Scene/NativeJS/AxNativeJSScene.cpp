//---------------------------------------------------------------------------------------------
//	Axis 3D Engine Copyright (C) 2017 Palitri
//
//	This software is released under the MIT License http://palitri.com/axis/license/
//
//	For help and documentation, visit http://palitri.com
//---------------------------------------------------------------------------------------------

#include "AxNativeJSScene.h"

#include "..\Native\AxNativeSceneReader.h"
#include "..\Native\AxNativeSceneWriter.h"

#include "..\..\..\Tools\Streams\AxMemoryStream.h"

#include "..\..\..\Engine\Axis.h"

const char *AxNativeJSScene::signature = "/**\r\n * Axis scene base64-encoded for JavaScript";

const char *AxNativeJSScene::formatName = "js";

AxNativeJSScene::AxNativeJSScene(void)
{
}


AxNativeJSScene::~AxNativeJSScene(void)
{
}

bool AxNativeJSScene::Load(AxStream &source)
{
	if (this->context == 0)
		return false;

	AxString fileData = source.ReadTextFull();

	if (!fileData.StartsWith(AxNativeJSScene::signature))
		return false;

	int base64Start = fileData.IndexOf("\"") + 1;
	if (base64Start == -1)
		return false;

	int base64End = fileData.IndexOf("\"", base64Start) - 1;
	if (base64End == -1)
		return false;

	AxString base64String = fileData.SubString(base64Start, base64End - base64Start + 1);
	
	void *data = 0;
	unsigned int dataSize;
	if (!AxString::FromBase64(base64String, &data, dataSize))
	{
		if (data != 0)
			delete[] data;

		return false;
	}
	
	AxMemoryStream nativeData(data, dataSize);
	AxNativeSceneReader reader(this->context);

	return reader.Read(nativeData);
}

bool AxNativeJSScene::Save(AxStream &destination, const char *format)
{
	if (this->context == 0)
		return false;

	if (format != 0)
	{
		AxString encodingCode = AxString(format).Trim('.');
		if ((encodingCode.length != 0) && (!encodingCode.Equals(AxNativeJSScene::formatName)))
			return false;
	}

	AxMemoryStream native;
	AxNativeSceneWriter writer(this->context);
	writer.Write(native);
	AxString base64 = AxString::ToBase64(native.data, native.length);
	
	AxString variableName = this->context->serializationParameters.friendlyName.Remove(" ");

	destination.WriteText(AxString(AxNativeJSScene::signature) +"\r\n * Generated by the Axis 3D engine http://palitri.com/axis/\r\n * @return {AxStream} Returns a stream containing an Axis scene. The result can be used as an input to the Axis.ImportScene() method\r\n */\r\n");
	destination.WriteText(AxString("var get") + variableName + " = function() {\r\n");
	destination.WriteText(AxString("\tvar base64String = \""));
	destination.WriteText(base64);
	destination.WriteText("\";\r\n");

	destination.WriteText(AxString("\tvar buffer = AxPlatformUtils.Base64ToArrayBuffer(base64String);\r\n"));

	destination.WriteText(AxString("\treturn new AxMemoryStream(buffer, buffer.byteLength);\r\n};"));

	return true;
}
